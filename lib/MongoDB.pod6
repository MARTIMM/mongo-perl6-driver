use v6.c;

=begin pod

=TITLE MongoDB Distribution

=SUBTITLE Distribution using mongodb servers for storage and retrieval of data

=head1 Synopsis

=begin code

use MongoDB::Client;
use MongoDB::Database;

use BSON::Document;

my MongoDB::Client $client .= new(:uri('mongodb://'));
my MongoDB::Database $database = $client.database('myPetProject');

# Inserting data
my BSON::Document $req .= new: (
  insert => 'famous-people',
  documents => [
    BSON::Document.new((
      name => 'Larry',
      surname => 'Wall',
    )),
  ]
);

my BSON::Document $doc = $database.run-command($req);
if $doc<ok> {
  say "Pffoei, inserted";
}

=end code

=head1 Description

This distribution provides a set of modules which can help you accessing mongod
server or servers.


=head2 Modules

Below are the modules provided with the distribution. The top few are the most
imported ones. These will help to connect to a server, define the database and
collection and to enter or modify documents in the collections. The core
operation is C<run-command> from C<MongoDB::Database>.


=head3 MongoDB/Client.pm6

This module defines class C<MongoDB::Client> and is used to connect to
mongod and mongos servers. This module can create a MongoDB::Database object
for you as well as a MongoDB::Collection object.


=head3 MongoDB/DataBase.pm6

Definition of class C<MongoDB::DataBase>. Its main task is to provide the method
run-command to access data, modify a server or to get information. A
MongoDB::Collection object can be created using Database.


=head3 MongoDB/Collection.pm6

Defines class C<MongoDB::Collection>. The main purpose of this module is to help to
find data in a collection. Inserting or modifying documents in a collection is
mainly done using run-command which uses the collection name in the command. In
those cases a collection object is not needed


=head3 MongoDB/Cursor.pm6

Defines class MongoDB::Cursor. The module is used to iterate through found data
searched for by C<find()> from the C<MongoDB::Collection> module. The object is
almost never generated by the user but is returned by the find method.


=head3 MongoDB/Log.pm6

Logging module.


=head3 MongoDB/Uri.pm6

Class C<MongoDB::Uri> used by C<MongoDB::Client> to parse the uri string.


=head3 MongoDB/HL/Users.pm6

Defines class C<MongoDB::HL::Users> to administer user accounts. It is placed in
HL (higher level) because all operations could be done with just the
run-command. This module adds facilities like checking password length etc.


=head3 MongoDB/HL/Collection.pm6

Defines class C<MongoDB::HL::Collection> to do more than the lower level
Collection provides.


=head3 MongoDB/Server.pm6

Class C<MongoDB::Server> is a class to represent a mongodb server. This class
can return Socket objects. It also authenticates when necessary. This is not to
be used directly.


=head3 MongoDB/Server/Socket.pm6

Class C<MongoDB::Server::Socket> to represent a connection to a server. This is
not to be used directly.


=head3 MongoDB/Server/Control.pm6

Class C<MongoDB::Server::Control> is used to start and stop a mongodb server
using configuration files. Mostly needed for tests and is not to be used
directly.


=head3 MongoDB/Server/Monitor.pm6

Class C<MongoDB::Server::Monitor> is used to monitor a mongodb server for
changes in the server state. Not to be used directly.


=head3 MongoDB/Wire.pm6

Defines class C<MongoDB::Wire>. Module is used to send and receive data. Not to
be used directly.


=head3 MongoDB/Header.pm6

Module C<MongoDB::Header> helps C<MongoDB::Wire> to encode and decode documents
for transport to and from the mongodb server. This is not to be used directly.


=head3 MongoDB/MDBConfig.pm6

Class C<MongoDB::MDBConfig> is a config database singleton. This is not to be
used directly.


=head3 MongoDB.pm6

Module to hold basic information reachable from other modules. Further it
defines a role and an Exception class. See for more below.



=comment =======================================================================
=begin comment

=head1 MongoDB

  package MongoDB { ... }

Base module to hold constants, enums and subs


=head2 Enumerations

=head3 TopologyType

  enum TopologyType is export <
    SINGLE-TPLGY
    REPLSET-WITH-PRIMARY-TPLGY REPLSET-NO-PRIMARY-TPLGY
    SHARDED-TPLGY UNKNOWN-TPLGY
  >;

Used to describe the state of the Client object. See also C<MongoDB::Client>.


=head3 ServerStatus

  enum ServerStatus is export <
    UNKNOWN-SERVER NON-EXISTENT-SERVER DOWN-SERVER RECOVERING-SERVER
    REJECTED-SERVER GHOST-SERVER

    REPLICA-PRE-INIT REPLICASET-PRIMARY REPLICASET-SECONDARY
    REPLICASET-ARBITER

    SHARDING-SERVER MASTER-SERVER SLAVE-SERVER
  >;

Used to describe the status of a Server object. See also C<MongoDB::Client>.


=head3 WireOpcode

  enum WireOpcode is export (
    :OP-REPLY(1),
    :OP-MSG(1000), :OP-UPDATE(2001), :OP-INSERT(2002),
    :OP-RESERVED(2003), :OP-QUERY(2004), :OP-GET-MORE(2005),
    :OP-DELETE(2006), :OP-KILL-CURSORS(2007),
  );

Operational codes to transport data to or from the mongodb server. The codes are
used internally.


=head3 QueryFindFlags

  enum QueryFindFlags is export (
    :C-NO-FLAGS(0x00), :C-QF-RESERVED(0x01),
    :C-QF-TAILABLECURSOR(0x02), :C-QF-SLAVEOK(0x04),
    :C-QF-OPLOGREPLAY(0x08), :C-QF-NOCURSORTIMOUT(0x10), :C-QF-AWAITDATA(0x20),
    :C-QF-EXHAUST(0x40), :C-QF-PORTAIL(0x80),
  );

Flags to be used with e.g. find(). See also C<MongoDB::Collection>.


=head3 ResponseFlags

  enum ResponseFlags is export (
    RF-CURSORNOTFOUND(0x01), RF-QUERYFAILURE(0x02),
    RF-SHARDCONFIGSTALE(0x04), RF-AWAITCAPABLE(0x08),
  );

Response flags found in result documents from the server. Used internally.







=head2 Constants

=head3 MAX-SOCKET-UNUSED-OPEN

  constant MAX-SOCKET-UNUSED-OPEN is export = 900;

Time in seconds that a socket can be left open unused.

=head2 Subsets


=head3 PortType

  subset PortType of Int is export where 0 < $_ <= 65535;

Port type is a number denoting a specific protocol, e.g. 80 is for C<http> and
27017 is for C<mongodb>. Any protocol served by a server can be given a different
port than its default. The range is from 0 to 65535 where 0 to 1023 can only
be used by servers with privileges.

=head3 Helper subsets when module cannot be loaded creating circular dependencies

  subset ClientType is export where .^name eq 'MongoDB::Client';
  subset DatabaseType is export where .^name eq 'MongoDB::Database';
  subset CollectionType is export where .^name eq 'MongoDB::Collection';
  subset ServerType is export where .^name eq 'MongoDB::Server';
  subset SocketType is export where .^name eq 'MongoDB::Socket';

These types can be used when an object is provided in some call interface. Only
to be used internally because you cannot create a new object from it.















=head1 Types

=head2 Loglevels

Defined as:

  enum Loglevels <<:Trace(1) Debug Info Warn Error Fatal>;

Used as:

  use MongoDB;
  my $sv = MongoDB::Loglevels::Warn;

Previously Severity but changed in favor of usage in Log::Async.

An enumerated type holding names of severity levels. Usage can be like below.
See L<stackoverflow|http://stackoverflow.com/questions/2031163/when-to-use-log-level-warn-vs-error>
for more information.

=for item1
Trace - Only when I would be "tracing" the code and trying to find one part of a
function specifically

=for item1
Debug - Information that is diagnostically helpful to people more than just
developers (IT, sysadmins, etc)

=for item1
Info - Generally useful information to log (service start/stop, configuration
assumptions, etc). Info I want to always have available but usually dont care
about under normal circumstances. This is my out-of-the-box config level

=for item1
Warn - Anything that can potentially cause application oddities, but for which I
am automatically recoverring (such as switching from a primary to backup server,
retrying an operation, missing secondary data, etc)

=for item1
Error - Any error which is fatal to the operation but not the service or
application (cant open a required file, missing data, etc). These errors will
force user (administrator, or direct user) intervention. These are usually
reserved (in my apps) for incorrect connection strings, missing services, etc.

=for item1
Fatal - Any error that is forcing a shutdown of the service or application to
prevent data loss (or further data loss). I reserve these only for the most
heinous errors and situations where there is guaranteed to have been data
corruption or loss.


=head1 role Logging

Defined as:

  role Logging { ... }

This role can be used by any Exception provided that it also delivers some
attributes and methods to work with.
This role needs the attributes C<date-time> and C<severity> which hold the date and
time of object creation and severity saying something about how bad it is (all
relative of course ;-). Furthermore for each severity level there must be a
method. These methods must return a string with info about the exception. Sugested
is that the methods C<trace>, C<debug> and C<info> return info as a oneliner.

E.g.

  method debug ( --> Str ) {
    return "some debug text from fields within...";
  }

The levels are shown above with the definition of C<Severity>. It is not
nessesary to add date,time and severity because that will be handled by the
C<log> method described below.


=head2 Methods

=head3 mlog

Defined as:

  method mlog (  )

Log the error in the logfile using the message facilities in the exception. A
file will be opened if it is not opened before. Logging occurs on the following
conditions:

=for item1
There is no logging when logging is turned off. See also
L<set-exception-processing|#set-exception-processing>.

=for item1
The severity in the exception is equal to or higher then the severity processing
level. This is by default set to C<Info>. So a C<Trace> exception is not logged
and a C<Warn> is. See also L<set-exception-process-level|#set-exception-process-level>.

Examples of use are shown below when defining the C<MongoDB::Message> Exception.

Furthermore the severity is also tested against the exception trow level and and the
exception is thrown when level is Fatal. Checking occurs on the following conditions:

=for item1
There is no checking when checking severity is turned off. See also
L<set-exception-processing|#set-exception-processing>.

=for item1
The severity in the exception is equal to or higher then the severity throw
level. This is set to C<Fatal>. So a C<Trace> exception is not thrown
but a C<Fatal> is.


=head1 Exported subs

=head2 set-exception-process-level

Defined as:

  sub set-exception-process-level (
    Severity:D $s where Trace <= $s <= Warn
  ) is export {

use as:

  set-exception-process-level(MongoDB::Severity::Trace);

Set the exception logging level done in L<log|#mlog>. It is not possible to
raise this level higher than MongoDB::Severity::Warn.


=head2 set-exception-processing

Defined as:

  sub set-exception-processing (
    Bool :$logging = True,
    Bool :$checking = True
  ) is export

Use as

  # Turn all processing off.
  set-exception-processing( :!logging, :!checking);

Turn logging and/or checking on or off. Turning checking of severity levels
completely off is not advisable. When a high severity like C<Fatal> is not
thrown and acted upon, the data may be compromised. Better is to raise the level
to some point. The default is already at its highest


=head2 set-logfile

Defined as:

  multi sub set-logfile ( Str:D $filename ) is export
  multi sub set-logfile ( IO::Handle:D $file-handle! ) is export

Use as:

  set-logfile('My-file.log');

or

  set-logfile($*err);

Set the name of a logfile. Default set value is C<MongoDB.log>. When the first
log is done, the file is automatically opened. After that the filename change
will not have any effect. Call open-logfile explicitly to switch to the new
logfile.

If the argument is a file handle, the previous log file will be closed if any.
This handle will not be closed when it is C<$*err>, C<$*in> or C<$*out>.


=head2 open-logfile

Defined as:

  sub open-logfile ( ) is export

Use as:

  open-logfile();

Open the logfile. Any previously opened logfile is closed.


=head2 Absolute methods to be defined by child classes

Defined as

  method trace ( --> Str ) { ... }
  method debug ( --> Str ) { ... }
  method info ( --> Str ) { ... }
  method warn ( --> Str ) { ... }
  method error ( --> Str ) { ... }
  method fatal ( --> Str ) { ... }

  method message ( --> Str ) { ... }

The first six methods are called for each specific sverity value. The last one
is shown when exception is thrown and not caught.


=head1 class MongoDB::Message

  package MongoDB { class MongoDB { ... } }


=head2 Readonly attributes

=head3 message

This field will always be defined. It holds the 'why something failed'.


=head3 code

This code doesn't have to be defined. When the error is returned from the
server there is also a code.


=head3 oper-data

This is the representation of the used data structure sent to the server if any.
Mostly this is a serialized string using perl() on the object.


=head3 collection-ns

Database- and Collection name involved. Its a string where names are separated
by a dot ('.'), the first name being the database name. It is also known as
full collection name.


=head3 method

Method or routine name where the call to *-message() (see below) took place.


=head3 line

Line number where the call to *-message() (see below) took place.


=head3 file

File wherein that happened


=head2 Methods

=head3 log

Defined as

  method log (
    Str:D :$message.
    $error-code where $_ ~~ any(Int|Str) = '',
    Str :$oper-data,
    Str :$collection-ns,
    MongoDB::Severity :$severity = MongoDB::Severity::Warn
  )

Usage as

  my MongoDB::Message $logger .= new;
  $logger.log(
    :Message('Oops'),
    :error-code('oops-code'),
    :oper-data({ nooops => True}.perl),
  );

When the severity is too high the exception will be thrown. A part of the data
in this object is often set with data originating from the server after a request.

Logging and check of severity will take place automatically if the severity of
the exception are above the specific treshold levels.

=end comment

=end pod
