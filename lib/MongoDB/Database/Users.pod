#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=head1 NAME MongoDB::Database::Users - User administration

=head1 SYNOPSIS

=begin nested
=begin code

use MongoDB::Connection;
use MongoDB::Database::Users;

# Initialize
#
my $connection = MongoDB::Connection.new;
my $database = $connection.database('test');

my MongoDB::Database $database = $connection.database('test1');
my MongoDB::Database::Users $users .= new(:$database);

my Hash $doc = $users.create_user(
  :user('John'),
  :password('simple'),
  :custom_data({license => 'to_kill'}),
  :roles(['readWrite'])
);

$users.set_pw_security(
  :min_un_length(5),
  :min_pw_length(8),
  :pw_attribs($MongoDB::Database::PW-OTHER-CHARS)
);

my Hash $doc = $users.create_user(
  :user('Long-John'),
  :password('N0t-s0-S!mPl3'),
  :custom_data({license => 'to_kill'}),
  :roles([${role => 'readWrite', db => 'test3'}])
);

$doc = $users.update_user(
  :user('John'),
  :password('mt+++'),
  :custom_data({license => 'to_heal'}),
  :roles([{role => 'readWrite', db => 'test1'},
          {role => 'dbAdmin', db => 'test2'}
         ]
        )
);

$doc = $users.drop_user(:user('John'));

$doc = $users.grant_roles_to_user( :user('Long-John'), :roles(['dbOwner']));

$doc = $users.revoke_roles_from_user(
  :user('Long-John'),
  :roles([${role => 'readWrite', db => 'test1'}])
);

$doc = $users.users_info(:user('Long-John'));

$doc = $users.drop_all_users_from_database();

=end code
=end nested

=head1 DESCRIPTION

Class to manipulate accounts used for authentication.

Some methods from the C<MongoDB::Database::Users> class will throw
C<X::MongoDB::Database> exceptions when things go wrong. E.g. creating a user
which already exists with faulty arguments.


=head2 METHODS

=for head3
  method set_pw_security (
    Int :$min_un_length where $min_un_length >= 2,
    Int :$min_pw_length where $min_pw_length >= 2,
    Int :$pw-attribs = $PW-LOWERCASE
  )

Method to specify some checks upon usernames and passwords. Default values for
the username minimal length is 2. For passwords idem depending on the password
attribute code. $pw-attribs specifies how passwords are to be checked. There are
4 codes recognized.

=item $PW-LOWERCASE. All is accepted but lowercase characters must at least be
used. When $min_pw_length is not set it will be set to 2.

=item $PW-UPPERCASE. All is accepted but lowercase and uppercase characters must
at least be used. When $min_pw_length is not set it will be set to 2.

=item $PW-NUMBERS. All is accepted but lowercase, uppercase characters and
numbers must at least be used. When $min_pw_length is not set it will be set to
3.

=item $PW-OTHER-CHARS. All is accepted but lowercase, uppercase characters,
numbers and special characters like @ ! $ etcetera, must at least be used. When
$min_pw_length is not set it will be set to 4.

If e.g. $PW-OTHER-CHARS and $min_pw_length is set to 2 then when using a
password of less the 4 characters is bound to fail.

=for head3
  method create_user (
    Str :$user, Str :$password,
    :$custom_data, Array :$roles, Int :$timeout
    --> Hash
  )

Method to create a user. Roles can be specified in several ways. It is an array
with entries of strings or hashes. When it is a string it specifies the role
assigned to the user. When it is a hash, the hash must have two keys. One is
C<role> and the other is C<db>. In this case the role is assigned to the user
but only for a specific daabase.

Important note; When one hash is used it is important to itemize the hash
because otherwise the hash will be flattened into a list of pairs which will
probably not what you mean.

Some examples of the roles option;
=begin nested
=begin code
:roles(['readWrite'])

:roles([{role => 'readWrite', db => 'test1'},
        {role => 'dbAdmin', db => 'test2'}
       ]
      )

:roles([${role => 'dbAdmin', db => 'test2'}])

:roles([{role => 'dbAdmin', db => 'test2'},])
=end code
=end nested
Notice the $ in the 3rd and the comma in the last example.


=for head3
  method drop_user ( Str :$user, Int :$timeout --> Hash )

Delete user from the database.

=for head3
  method drop_all_users_from_database ( Int :$timeout --> Hash )

Drop all users from the database

=for head3
  method grant_roles_to_user (
    Str :$user, Array :$roles, Int :$timeout
    --> Hash
  )

Grant roles to user.

=for head3
  method revoke_roles_from_user (
    Str :$user, Array :$roles, Int :$timeout
    --> Hash
  )

Revoke roles from user

=for head3
  method update_user (
    Str :$user, Str :$password,
    :$custom_data, Array :$roles, Int :$timeout
    --> Hash
  )

Update user accont data

=for head3
  method users_info (
    Str :$user,
    Bool :$show_credentials,
    Bool :$show_privileges,
    Str :$database
    --> Hash
  )

Get information about a user

=for head3
  method get_users ( --> Hash )

Get information about all users

=end pod

