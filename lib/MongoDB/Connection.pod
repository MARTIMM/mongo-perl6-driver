#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=head1 NAME MongoDB::Connection - Operations on a MongoDB Connection

=head1 SYNOPSIS

=begin nested
=begin code

use v6;
use MongoDB;

# Connect to MongoDB server at localhost port 27017
my MongoDB::Connection $connection .= new();

# Get an array of documents
my @db-status-info = $connection.list_databases();

# Get an array of database names
my @db-names = $connection.list_databases();

if( any(@db-names
my MongoDB::Database $database = $connection.database('test');

=end code
=end nested

=head1 DESCRIPTION

This class helps the client to connect to the server and provides some
maintenance commands. The class is loaded automatically with the MongoDB
module.

=head1 METHODS

=for head2
method database ( Str $name --> MongoDB::Database ) {...}

Get a database object named $name. When nonexistend, it will be created after
inserting documents in the databases collection.

=for head2
method list_databases ( --> Array ) {...}

Get an array of documents each having keys C<name>, C<sizeOnDisk> and C<empty>. See
L<http://docs.mongodb.org/manual/reference/command/listDatabases/#dbcmd.listDatabases>

=for head2
method database_names ( --> Array ) {...}

Using above call the method returns an array of databases.

=for head2
method version ( --> Hash ) {...}

This method uses build_info (see below) to get version information. The returned
hash will have the following fields;

=item B<release1>: First number of release.
=item B<release2>: Second number or release. When odd it a development version.
=item B<revision>: Release bug fixes and backwards-compatible changes.
=item B<release-type>: Type can be one of 'production' or 'development'.

=for head2
method build_info ( --> Hash ) {...}

Method to get server information. The following fields are defined in the
returned hash;

=item B<version>: Version string, see version().
=item B<gitVersion>: The commit identifier that identifies the state of the code used to build the mongod
=item B<sysInfo>: A string that holds information about the operating system, hostname, kernel, date, and Boost version used to compile the mongod
=item B<loaderFlags>: The flags passed to the loader that loads the mongod.
=item B<compilerFlags>: The flags passed to the compiler that builds the mongod binary.
=item B<allocator>: The memory allocator that mongod uses. By default this is tcmalloc after version 2.2, and system before 2.2.
=item B<versionArray>: An array that conveys version information about the mongod instance. See version for a more readable version of this string.
=item B<javascriptEngine>: A string that reports the JavaScript engine used in the mongod instance. By default, this is V8 after version 2.4, and SpiderMonkey before 2.4.
=item B<bits>: A number that reflects the target processor architecture of the mongod binary.
=item B<debug>: A boolean. true when built with debugging options.
=item B<maxBsonObjectSize>: A number that reports the Maximum BSON Document Size.


=end pod

