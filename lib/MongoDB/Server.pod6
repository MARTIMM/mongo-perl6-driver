use v6;

=begin pod

=begin Xhtml
<style>
  pre {
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
  td {
    vertical-align:     top;
  }
</style>
=end Xhtml

=TITLE class MongoDB::Server

=SUBTITLE Mongod server object

  unit package MongoDB;
  class Server { ... }

=head1 Synopsis

  my MongoDB::Client $client .= new(:uri<mongodb://>);
  my MongoDB::Server $server = $client.select-server;

This class is used to provide sockets for communication with a mongo database
server. The class is loaded and controlled by the C<MongoDB::Client> module.
I<Users should not use this class directly but ask for a server using methods
from a Client object. And even that users should do it carefully. All server
communication is controlled internally>.


=head1 Readonly attributes

=head2 server-name

  has Str $.server-name;

Server name or ip of this object.


=head2 server-port

  has Int $.server-port;

Server port of this object.


=head2 max-sockets

  has Int $.max-sockets;

Maximum number of open sockets per server object
Can be changed by user of Server object. New values must >= 3.


=head1 Methods

=head2 new

Defined as:

  submethod BUILD (
    Str:D :$host!,
    Int:D :$port! where (0 <= $_ <= 65535),
    Int :$max-sockets where $_ >= 3 = 3,
    MongoDB::Database:D :$db-admin,
    MongoDB::Client:D :$client
  )

Creates a new C<MongoDB::Server> object. The object tries to establish a
connection to the server. The IO::Socket::INET class is used for that
and will throw an exception when it fails. C<MongoDB::Client> creates the
Server object normally and catches the exception on failure.
I<Do not use this method directly!>.

=head2 server-init

  method server-init ( )

Do not use it. Get a Server object from the Client object.

=head2 get-status

Get current status about this server. C<server-status()> in the Client object
will return the same information.

=head2 tap-monitor

  method tap-monitor ( |c --> Tap )

Do not use it! This is for internal use only.

=head2 get-socket

  method get-socket ( --> MongoDB::Socket )

Get a MongoDB::Socket object. By default there can be only 3 open sockets per
server object. See also set-max-sockets() below. When operations are done the
socket must be closed to prevent problems.

=head2 raw-query

  method raw-query (
    Str:D $full-collection-name, BSON::Document:D $query,
    Int :$number-to-skip = 0, Int :$number-to-return = 1,
    Bool :$authenticate = True
    --> BSON::Document
  )

Direct a query to this server. Not often used but needed when to get specific
information or to modify a server e.g. to transform a standalone server into
a replica server. The normal queries using C<run-command()>.will sit and wait
for a master or primary server becomes available.

=begin comment
=head2 perl

  method perl ( --> Str )

Simple string representation of this object.
=end comment

=head2 name

  method name ( --> Str )

Returns a string in the format <servername> ':' <port number>.

=end pod
