#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=head1 NAME MongoDB::Collection - Operations on a MongoDB Collection

=head1 SYNOPSIS

=begin nested
=begin code

use MongoDB;

# Initialize
#
my $connection = MongoDB::Connection.new( );
my $database = $connection.database( 'test' );
my $collection = $database.collection( 'perl_users' );

# Insert documents
#
$collection.insert( %(name => 'Piet Hein', nick => 'ph', versions => [ 5, 6])
                  , %(name => 'Pietje Bell', nick => 'pb')
                  );

# Find everything
#
my $cursor = $collection.find( );
while $cursor.fetch( ) -> %document { %document.perl.say; }

# Or narrow down using condition.
#
$cursor = $collection.find( { nick => 'ph' } );
$cursor.fetch( ).perl.say;

# Update any document, watchout for the MongoDB commands which uses $'s
#
$collection.update( {}, {'$set' => {company => 'Dutch Corners'}});

# Update a specific document
#
$collection.update( {nick => 'ph'}, {'$set' => { company => 'Dutch Corners'}});

# Remove specific documents.
#
$collection.remove( { nick => 'ph' } );

# Remove all documents.
#
$collection.remove( );

=end code
=end nested

=head1 DESCRIPTION

Classes to help accessing and manipulating MongoDB collections. The class is
loaded automatically with the MongoDB
module.

=head1 CLASSES

=for head2
class X::MongoDB::Collection is Exception {...}

Some methods from the C<MongoDB::Collection> class will throw exceptions when
things go wrong. E.g. deleting a non existent index will hickup.

=begin nested
=begin code

if $cmd ~~ 'delete' {
  $doc = $collection.drop_index( %( non_existent_index => 1));

  CATCH {
    when X::MongoDB::Collection {
      say "Drop index error: $_";
    }
  }
}

=end code
=end nested

Instead of catching the thrown exception you can also try the call to see if
it works or not.

=begin nested
=begin code

if $cmd ~~ 'delete' {
  try $doc = $collection.drop_index( %( code1 => 1));
  if $! {
    say "Drop index error: $!";
}

=end code
=end nested


=for head2
class MongoDB::Collection does MongoDB::Protocol {...}

The class of which the methods are explaned below. The class has the following
attributes;

=for head3
has $.database;

If attribute is defined it holds the current MongoDB::Database object.

=for head3
has Str $.name;

If attribute is defined it holds the name of the collection.

=head1 METHODS

=for head2
 method insert (
   **@documents,
   Bool :$continue_on_error = False
 )

Insert a document. You may specify more than one. These documents must all be
hashes. Below are the possible ways to insert documents. Checks are made to see
if there are key names starting with a '$' or having a '.' in the name. Top
level keys are checked to see if C<_id> is used. When found, the collection
is checked for the value of the key to see it has been used before. The value
must be unique!

The flag B<:continue_on_error> can be set to let the insert continue its job
when a document insertion fails. This will not prevent checking of key names
mentioned above.

=begin nested
=begin code

my %d1 = k1 => 'v1', k2 => 'v2';
my $d2 = %(k1 => 'v1a');
$collection.insert( :continue_on_error, {%d1}, $d2);

my @docs = $%( k2 => 'v2a', k5 => 'v5'), $%( k1 => 'v1b', k2 => 'v2b');
$collection.insert(@docs);

=end code
=end nested

=begin head2 
method find ( %criteria = { },, %projection = { },
              Int :$number_to_skip = 0, Int :$number_to_return = 0,
              Bool :$no_cursor_timeout = False
            ) {...}
=end head2

Find documents in the database. When %criteria is empty all documents are
returned, There are 2 options and a flag to control the search. %projection is
used to select the fields to be returned. It looks like {field => 1/0}. When 1
it is included, when 0 it will be excluded. The _id field is always included
unless explicitly excluded like {_id => 0}. The function returns a
MongoDB::Cursor.

B<:number_to_skip> is used to skip a number of documents.

B<:number_to_return> is used to ask for a specific number of documents.

B<:no_cursor_timeout> The server normally times out idle cursors after an
inactivity period (10 minutes) to prevent excess memory use. Set this option to
prevent that.

=begin nested
=begin code
$cursor = $collection.find({nick => 'pb'});
$cursor.fetch( ).perl.say;
=end code
=end nested

=for head2
method find_one ( %criteria = { }, %projection = { } --> Hash ) {...}

Same as for find() except it will only return one document.
=for head2
method find_and_modify ( Hash $criteria = { }, %projection = { },
                         :$remove = False, :%update = { }, :%sort = { },
                         :$new = False, :$upsert = False
                         --> Hash ) {...}

Search record by the given criteria and sort order.
=begin nested
=begin code
my @places = <amsterdam NY LA haarlem utrecht parijs oradour poitiers vienna>;
my %d1 = code => 'd1 ';

for ^5,(5...1) -> $code-postfix {               # Insert a number of documents
  %d1<code> ~= $code-postfix;
  %d1<city> = @places.roll;
  $collection.insert(%d1);
}

$doc = $collection.find_and_modify(
  {code => 'd1 01234543'},                      # Find this code
  update => { '$set' => {code => 'd1 012'}},    # Change into 'd1 012'
  :new                                          # Return modified doc
);
=end code
=end nested

=begin head2 
method update ( %selector, %update,
                Bool :$upsert = False, Bool :$multi_update = False
              ) {...}
=end head2 

Update documents in the database. There are 2 flags defined.

B<:upsert> If set, the database will insert the supplied object into the
collection if no matching document is found.

B<:multi_update> If set, the database will update all matching objects in the
collection. Otherwise only updates first matching doc.

The commands used by MongoDB such as $set, $inc and $push can easily create
unexpected errors in perl programs because scalars are written the same way.
Make sure you escape the $ sign or enclose the commands in single quoted strings
to prevent interpolation.

=begin nested
=begin code
# Update all documents
$collection.update({}, {'$set' => {company => 'Implix'}});

# Update documents for nick 'ph' or, when not existent, create a new document.
$collection.update( :upsert, {nick => 'pb'}, {'$push' => {versions => 7}});
=end code
=end nested

=for head2 
method remove ( %selector = {}, Bool :$single_remove = False ) {...}

Remove the selected documents from the database.

B<:single_remove> If set, the database will remove only the first matching
document in the collection. Otherwise all matching documents will be removed.

=begin nested
=begin code
# Remove first document for nick 'ph'.
$collection.remove( :single_remove, {nick => 'pb'});

# Remove all documents
$collection.remove();
=end code
=end nested

=for head2
method drop ( --> Hash ) {...}

Drop the current collection from the database.

This method will throw a X::MongoDB::Collection exception on failures.

=for head2
method explain ( %criteria = { } --> Hash ) {...}

Return information on the query plan using the criteria. There are many fields
in the document. The fields returned also depend on the type of queries. Look
for this information on the L<MongoDB site|http://docs.mongodb.org/manual/reference/method/cursor.explain>.

=for head2
method count ( %criteria = { }, --> Int ) {...}

Count documents using search criteria without using find and a cursor..

=for head2
method distinct ( $field-name!, %criteria = { }, --> Array ) {...}

Find distinct values of a field depending on criteria.

=for head2
multi method group ( Str $js_reduce_func, Str :$key = '',
                    :%initial = {}, Str :$key_js_func = '',
                    :%condition = {}, Str :$finalize = ''
                    --> Hash ) {...}

=for head2
multi method group ( BSON::Javascript $reduce_js_func, Str :$key = '',
                     :%initial = {}, BSON::Javascript :$key_js_func = '',
                     :%condition = {}, Str :$finalize = ''
                     --> Hash ) {...}

Groups documents in a collection by the specified keys and performs simple
aggregation functions. See also L<this
page|http://docs.mongodb.org/manual/reference/method/db.collection.group/>.

First method will call second with the javascript texts converted to
BSON::Javascript.

The group() method does not work with sharded clusters. Use the
aggregation framework or map-reduce in sharded environments.

=for head2
multi method map_reduce ( Str $map_js_func, Str $reduce_js_func, Hash :$out,
                          Str :$finalize, Hash :$criteria, Hash :$sort,
                          Hash :$scope, Int :$limit, Bool :$jsMode = False
                          --> Hash ) {...}
=for head2
multi method map_reduce ( BSON::Javascript $map_js_func,
                          BSON::Javascript $reduce_js_func,
                          BSON::Javascript :$finalize,
                          Hash :$out, Hash :$criteria, Hash :$sort,
                          Hash :$scope, Int :$limit, Bool :$jsMode = False
                          --> Hash ) {...}

The mapReduce command allows you to run map-reduce aggregation operations over
a collection. See also L<this
page|http://docs.mongodb.org/manual/reference/command/mapReduce/>.

First method will call second with the javascript texts converted to
BSON::Javascript.

=for head2
method ensure_index ( %key-spec!, %options = {} --> Nil ) {...}

Create a new index on the current collection. The %key-spec document specify
which indexes must be created and how. The %options is a document on how to
process the insertion. Depending on the type of index, %options can have
different keys.

See also information on the MongoDB site about L<general|http://docs.mongodb.org/manual/reference/method/db.collection.ensureIndex/>,
L<text|http://docs.mongodb.org/manual/core/index-text/>, L<2dsphere|http://docs.mongodb.org/manual/core/2dsphere/>,
L<ed|http://docs.mongodb.org/manual/core/2d/> and L<geoHaystack|http://docs.mongodb.org/manual/core/geohaystack/>
indexes.

This method will throw a X::MongoDB::Collection exception on failures.

=for head2
method drop_index ( $key-spec! --> Hash ) {...}

Drop an index. The %key-spec specifies the keys to be dropped. It has the
same format as in ensure_index. When the %options<name> key is used when setting
an index, the name itself can be used to drop the index. Lastly, when the text
is '*', all indexes except for _id will be deleted. This is what drop_indexes()
will do for you.

=begin nested
=begin code

$collection.ensure_index( %( code1 => 1), %( name => 'testindex'));
$doc = $collection.drop_index('testindex');

=end code
=end nested

This method will throw a X::MongoDB::Collection exception on failures.

=for head2
method drop_indexes ( --> Hash ) {...}

Drop all indexes for the collection except _id.

=for head2
method get_indexes ( --> MongoDB::Cursor ) {...}

Get a cursor with which to retrieve documents with index information in
the current collection. There is always one document of the _id_ index.

=for head2
method stats ( Int :$scale = 1, Bool :$indexDetails = False,
               Hash :$indexDetailsField,
               Str :$indexDetailsName
               --> Hash ) {...}

Get some statistics about indexes and other things.

=for head2
method data_size ( --> Int ) {...}

Return size field of statistics. This is the total size of all records in a
collection. This value does not include the record header, which is 16 bytes per
record, but does include the record\u2019s padding. Additionally size does not
include the size of any indexes associated with the collection, which the
totalIndexSize field reports.

=end pod

