#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------
#
=begin pod

=TITLE MongoDB Package

=SUBTITLE Package using mongod server for storage and retrieval of data


=head1 DESCRIPTION

This package holds a set of modules which will help you accessing a MongoDB
server. All primitive functions are installed to insert, update, find and remove
documents. This package will be continuesly improved to provide more and more
functionality.


=head1 MODULES

The modules in this package are the following

=head2 Module MongoDB/Authenticate.pm6

Definition of class MongoDB::Authenticate which provides authentication of
users defined with methods from MongoDB::Users.
See also L<its pod file|MongoDB/Authenticate.pod>.

=head2 Module MongoDB/Connection.pm

This file defines class C<MongoDB::Connection> and is used to connect to a
mongod server and to get basic information. See also L<its pod
file|MongoDB/Connection.pod>.

=head2 Module MongoDB/Collection.pm

Defines class MongoDB::Collection. This is a module to perfoem the standard CRUD
operations. See also L<its pod file|MongoDB/Collection.pod>.

=head2 Module MongoDB/Cursor.pm

Defines class MongoDB::Cursor. The module is used to iterate through found data
search for by methods from the C<MongoDB::Collection> module. See also L<its pod
file|MongoDB/Cursor.pod>.

=head2 Module MongoDB/DataBase.pm

Definition of class MongoDB::DataBase which handles specific database tasks.
See also L<its pod file|MongoDB/DataBase.pod>.

=head2 Module MongoDB/DBRef.pm

Defines MongoDB::DBRef to handle references between documents.
See also L<its pod file|MongoDB/DBRef.pod>.

=head2 Module MongoDB/Users.pm6

Defines class MongoDB::Users to administer user accounts.
See also L<its pod file|MongoDB/Users.pod>.

=head2 Module MongoDB/Wire.pm

Defines class MongoDB::Wire. Module for which its methods access the C<BSON>
encoding methods are used before sending and decoding tools after receiving data
from the server. See also L<its pod file|MongoDB/Wire.pod>.

=head2 Module MongoDB

Module to hold basic information reachable from other modules. Further it
defines a role and an Exception class. See for more below.

=for COMMENT
################################################################################

=head1 MongoDB

Defined as

  package MongoDB:ver<0.0.1> { ... }

Used as

  use MongoDB;

Base module to hold basic information


=head1 TYPES

=head2 Severity

Defined as:

  enum Severity <debug info warning error fatal>;

Used as:

  use MongoDB;
  my $sv = MongoDB::Severity::warning

An enumerated type holding names of severity levels


=head1 EXPORTED SUBS

=head2 set-exception-throw-level

Defined as:

  sub set-exception-throw-level ( Severity:D $s ) is export

use as:

  set-exception-throw-level(MongoDB::Severity::warning);

Exceptions are thrown by the C<test-severity> method in the C<Logging> role if
the severity level in the exception object is higher then this threshold.

=head2 set-logfile-name

Defined as:

  sub set-logfile-name ( Str:D $filename ) is export

Use as:

  set-logfile-name('My-logfile.log');

Set the name of a logfile. Default set value is C<MongoDB.log>. When the first
log is done, the file is automatically opened. After that the filename change
will not have any effect. Call open-logfile explicitly to switch to the new
logfile.

=head2 open-logfile

Defined as:

  sub open-logfile (  ) is export

Use as:

  open-logfile();

Open the logfile. If any previously opened logfile is closed.


=head1 ROLE Logging

Defined as:

  role Logging[Exception $e] { ... }

Used as:

  my $e = X::MongoDB.new(...);
  my $l = MongoDB::Logging[$e];

The role is parameterized to be used with an exception object. After
instantiating all methods in the role work on the same exception object. This
role looks for specific attributes and methods which must be defined there.
These are the attributes C<date-time> and C<severity> which hold the date and
time of object creation and severity saying something about how bad it is (all
relative of course ;-). Furthermore for each severity level there must be a
method. These methods must return a string with info about the exception.

E.g.

  method debug ( --> Str ) {
    return "some error text from fields within...";
  }

The levels are shown above with the definition of C<Severity>. It is not
nessesary to add date,time and severity because that will be handled by the
C<log> method described below.

The Exception does not have to be defined in which case all methods will act as
a noop.

=head2 METHODS

=head3 log

Defined as:

  method log ( --> Exception )

Use as

  my $e = Logging[X::MongoDB.new(...)].log;

or maybe as

  my $e = X::MongoDB.new(...);
  my $l = MongoDB::Logging[$e];
  $l.log;

Log the error in the logfile using the message facilities in the exception.. 

=head3 test-severity

Defined as:

  method test-severity (  )

Used as

  my $e = X::MongoDB.new(...);
  my $l = MongoDB::Logging[$e];
  $l.test-severity;

Or log and test in one go:

  MongoDB::Logging[$e].log.test-severity;

Test severity of the exception and throw when level gets to high (above
threshold set with C<set-exception-throw-level>.


=head1 EXCEPTION X::MongoDB

=head2 METHODS

=head3 new

Defined as

  submethod BUILD (
    Str:D :$error-text,
    Str:D :$error-code,
    Str:D :$oper-name,
    Str :$oper-data,
    Str :$database-name,
    Str :$collection-name,
    MongoDB::Severity :$severity = MongoDB::Severity::warning
  )

Usage as

  my X::MongoDB $e .= new(
    :error-text('Oops'),
    :error-code('oops-code'),
    :oper-name('return-other-than-oops'),
    :oper-data({ nooops => True}}.perl),
  );

Creates an exception object C<X::MongoDB>. Most of the methods will return this
object when an error occurred. In a few occations it is stored in a local
$.status attribute. A part of the data in this object is often set from data
originating from the server after a request. However, it will be set by the
method itself when the server did not play a role in the action.

Some of the fields can be left undefined. E.g. when an error occurs while
dropping a database, the collection name would not be set for that operation.
When you think that you cannot handle the exception you can throw the exception
yourself like so:

  my $collection = $database.collection('persons addresses');
  die $collection.status if ? $collection.status;

or, when taking the examples above:

  my $collection = $database.collection('persons addresses');
  my $l = MongoDB::Logging[$collection.status];
  $l.test-severity;

=head3 error-text

C<$error-text> is set from error message found in response data from server. One
exception is when making a connection fails. Then the text is set by the method
C<new>. Field will always be defined.

    has Str $.error-text;       # Error text and error code are data mostly
    has Str $.error-code;       # originated from the mongod server
    has Str $.oper-name;        # Used operation or server request
    has Str $.oper-data;        # Operation data are items sent to the server
    has Str $.database-name;    # Database name involved
    has Str $.collection-name;  # Collection name involved
    has Str $.method;           # Method or routine name
    has Str $.line;             # Line number where X::MongoDB is created
    has Str $.file;             # File in which that happened



=head1 DEPENDENCIES

Module MongoDB depends on Module C<BSON> and C<Digest::MD5>.


=head1 SEE ALSO

The MongoDB site at L<http://www.mongodb.org/>


=head1 BUGS and TODO

There is a lot still to be implemented. A non exhaustive list of todo's:

=for item1
Mongo priority recomendations. Following L<priority
recomendations|http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-driver-requirements/>
from the mongodb site about writing drivers.

=for item1
Speed, protocol correctness and clear code are priorities for now.

=for item2
Speed can be influenced by specifying types on all variables. Also setting
constraints like (un)definedness etc on parameters. Most of it is already done.

=for item2
Furthermore the speedup of the language perl6 itself would have more impact than
the programming of a several month student(me) can accomplish ;-). As of
september 2015 a great improvement is made.

=for item1
Keys must be checked for illegal characters when inserting documents.

=for item1
Test to compare documents

=for item1
Test group aggregation keyf field and finalize

=for item1
Test map reduce aggregation more thoroughly.

=for item1
In method map_reduce the parameter scope is not used.

=for item1
Explain changed after mongodb 3.0

=for item1
Testing $mod in queries seems to have problems in version 3.0.5

=for item1
Get info about multiple accounts instead of one at the time

=for item1
Need a change in throwing exceptions. Not all errors are unrecoverable. Return
e.g. a failure instead of throwing an exception. C<MongoDB::Connect.new()> is
the first method who saves an exception in its c<$.status> attribute.

=for item1
Modify Mongo.pm. Remove use statements and add variables for use by modules.
This is done now.

=for item1
While we can add users to the database we cannot authenticate due to the lack
of supported modules in perl 6. E.g. I'd like to have SCRAM-SHA1 to
authenticate with. 

=for item1
Change method names with an underscore into names with a dash. E.g. map_reduce
will become then map-reduce. When it will be defined, the old names with an
underscore will show deprecation warnings. Other names starting with an
underscore has always been the perl5 notion of being a private variable or
routine. In perl6 this a method can be initiated with an exclamation mark to
make it private.

=for item1
At the moment the packages is written to use the latest mongo version 3.* only.
Perhaps also the latest 2.* version should be supported too.


=head1 RELEASE NOTES

This section is partly taken over from the README.md document which is included
in this package.

=for item1
Version 0.25

=for item2
Addition of methods to administer user accounts. These are; create a user,
drop a user, drop all users, get users info, grant roles, revoke roles and
update users.

=for item2
Added document checks to inserts. No dollars on first char of keys and no
dots in keys. This is checked on all levels. On top level the key C<_id>
is checked if the value is unique in te collection.

=for item2
Changes in code caused by upgrading from MongoDB 2.4 to 3.0.5. Many of the
servers return messages were changed.


=for item1
Version 0.24

=for item2
Added C<version> and C<build_info> to MongoDB::Connection.

=for item2
Added error processing in method C<count> in module C<MongoDB::Cursor>. Throws
C<X::MongoDB::Cursor> exception.

=for item2
Changes caused by rakudo update in June 2015. BIG PROBLEM!!!!!!!!! Should have
seen this coming! Its about C<run_command>. A hash needs to be setup with
therein a command to be processed. With the new rakudo the hash get hashed
properly and the keys are now in some unpredictable order. One of the
necessities of run_command is that the command is found at the first key value
pair. During encoding into a BSON byte array the command can be placed anywhere
in the string and some other option coming at the first location will be seen
as the command. SOLVED; mongodb run_command needs command on first key value
pair. Because of this a few multi methods in several modules are added to
process Pair arrays instead of hashes.

=for item2
Added C<find_and_modify>, C<stats>, C<data_size> methods in module
C<MongoDB::Collection>.


=head1 AUTHORS

  Paweł Pabian - Creator of the modules until january 2015
  Marcel Timmerman - Maintainer since january 2015 (MARTIMM on github)

=head1 LICENSE AND COPYRIGHT

Released under L<Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>.

=end pod

#http://unicode-table.com/en/026B/
#E<51627>
#E<0xC9AB>

#-------------------------------------------------------------------------------
