#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell("perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=begin Xhtml
<style>
  pre {
/**/
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
</style>
=end Xhtml

=TITLE class MongoDB::Database

=SUBTITLE Operations on a MongoDB database

Defined as

  package MongoDB { class Database { ... } }

Use as

  use MongoDB::Connection;
  use MongoDB::Database;

  # Initialize
  #
  my MongoDB::Connection $connection .= new;
  my MongoDB::Database $database .= new(:name<mydatabase>);

  # Drop whole database
  #
  $database.run-command:.dropDatabase => 1;


=head1 METHODS

=head1 method new

Defined as

  submethod BUILD ( Str :$name )

Create a database object.

=head2 method name

Defined as

  has Str $.name;

Stored name of the database.

=head2 method collection

Defined as

  method collection ( Str $name --> MongoDB::Collection )

Select collection and return a collection object. When the collection is new it
will only be created when data is inserted.

=head2 method run-command

Defined as

  multi method run-command ( BSON::Document:D $command --> BSON::Document )
  multi method run-command ( |command-capture --> BSON::Document )

Run a command against the preselected collection and database. For proper
handling of this command it is nesseary to study the MongoDB site. A good
starting point is L<at this page|https://docs.mongodb.org/manual/reference/command/>.

The command argument is a C<BSON::Document> or List of Pair of which the latter
might be more convenient. Mind the comma's when describing list of one Pair!
This is very important see e.g. the following perl6 REPL interaction;

  > 123.WHAT.say
  (Int)
  > (123).WHAT.say
  (Int)
  > (123,).WHAT.say
  (List)

  > (a => 1).WHAT.say
  (Pair)
  > (a => 1,).WHAT.say
  (List)

See also L<Perl6 docs here|http://doc.perl6.org/routine/%2C> and
L<here|http://doc.perl6.org/language/list>


First example to insert a document using a C<BSON::Document>
See also L<information here|https://docs.mongodb.org/manual/reference/command/insert/>.

=begin code

# Method 1. With info from http://perldoc.perl.org/perlhist.html
# There are tests from the Test package
# 
BSON::Document $req .= new: (
  insert => 'famous_people',
  documents => [
    BSON::Document.new((
      name => 'Larry',
      surname => 'Walll',
      languages => BSON::Document.new((
        Perl0 => 'introduced Perl to my officemates.',
        Perl1 => 'introduced Perl to the world',
        Perl2 => 'introduced Henry Spencer\'s regular expression package.',
        Perl3 => 'introduced the ability to handle binary data.',
        Perl4 => 'introduced the first Camel book.',
        Perl5 => 'introduced everything else, including the ability to introduce everything else.',
        Perl6 => 'A perl changing perl event, Dec 24, 2015'
      )),
    )),
  ]
);

# Run the command with the insert request
#
BSON::Document $doc = $database.run-command($req);
is $doc<ok>, 1, "Result is ok";
is $doc<n>, 1, "Inserted 1 document";

=end code

As you can see above, it might be confusing how to use the round brackets ().
Normally when a (sub)method or sub is called you have positional and named
arguments. A named argument is like a pair. So to provide a pair as a positional
argument, the pair must be enclosed between an extra pair of round brackets.
E.g. B<<$some-array.push(($some-key => $some-value));>>. There is a nicer form
using a colon ':' e.g. B<<$some-array.push: ($some-key => $some-value);>>. This
is done above on the first line. However, this is not possible at the inner
calls because these round brackets also group the pairs in the list.

The second method is easier using C<List> of C<Pair> not only for the
run-command but also in place of nested C<BSON:Document>'s. Now we use
findAndModify (see documentation 
L<here|https://docs.mongodb.org/manual/reference/command/findAndModify/>) to
repair Larry's surname which should be Wall instead of Walll.

=begin code

# Method 2 using List of Pair
#
my BSON::Document $doc = $database.run-command: (
  findAndModify => 'famous_people',
  query => (surname => 'Walll'),
  update => ('$set' => surname => 'Wall'),
);

is $doc<ok>, 1, "Result is ok";
is $doc<value><surname>, 'Walll', "Old data returned";
is $doc<lastErrorObject><updatedExisting>, True, "Existing document updated";


=end code

Please also note that mongodb uses query selectors such as $set above and
virtual collections like $cmd. Because they start with a '$' these must be
protected against evaluation using single quotes.

=end pod




=finish

=head2 method drop

Defined as

  method drop ( --> Hash )

Drop the database. All indexes and other stuff involved are removed.
=head2 method create-collection

Defined as

  method create-collection(
    Str $collection-name, Bool :$capped,
    Bool :$autoIndexId, Int :$size,
    Int :$max, Int :$flags
    --> MongoDB::Collection
  )

Create a collection explicitly and return a collection object. The arguments
are (See also L<here|http://docs.mongodb.org/manual/reference/command/create/>);.

=for item1
C<$collection-name>: Name of the new collection.

=for item1
C<$capped>: Optional. To create a capped collection. specify true. If you
specify true, you must also set a maximum size in the size field.

=for item1
C<$autoIndexId>: Optional. Specify false to disable the automatic creation of an
index on the C<_id> field. Before 2.2, the default value for autoIndexId was
False.

=for item1
C<$size>: Optional. The maximum size for the capped collection. Once a capped
collection reaches its maximum size, MongoDB overwrites older old documents with
new documents. The size field is required for capped collections.

=for item1
C<$max>: Optional. The maximum number of documents to keep in the capped
collection. The size limit takes precedence over this limit. If a capped
collection reaches its maximum size before it reaches the maximum number of
documents, MongoDB removes old documents. If you use this limit, ensure that the
size limit is sufficient to contain the documents limit.


=head2 method list-collections

Defined as

  method list-collections ( --> Array )

Return an array of docs with all types of collections in the database. To get
the names of the users collection it is better to use the colection_names()
method explained below.

=head2 method collection-names

Defined as

  method collection-names ( --> Array )

Return an array of the users collectionnames.

=head2 method get-last-error

Defined as

  method get-last-error (
    Bool :$j = True, Int :$w = 0,
    Int :$wtimeout = 1000, Bool :$fsync = False
    --> Hash
  )

Returns the error status of the preceding write operation on the current
connection. There are methods in classes which use this call implicitly to
see if all went well.

The arguments are (See also L<here|http://docs.mongodb.org/manual/reference/command/getLastError>);

=for item1
C<j>: If true, wait for the next journal commit before returning, rather than
waiting for a full disk flush. If mongod does not have journaling enabled, this
option has no effect. If this option is enabled for a write operation, mongod
will wait no more than 1/3 of the current commitIntervalMs before writing data
to the journal.

=for item1
C<w>: When running with replication, this is the number of servers to replicate
to before returning. A w value of 1 indicates the primary only. A w value of 2
includes the primary and at least one secondary, etc. In place of a number, you
may also set w to majority to indicate that the command should wait until the
latest write propagates to a majority of replica set members. If using w, you
should also use wtimeout. Specifying a value for w without also providing a
wtimeout may cause getLastError to block indefinitely.

=for item1
C<fsync>: If true, wait for mongod to write this data to disk before returning.
Defaults to false. In most cases, use the j option to ensure durability and
consistency of the data set.

=for item1
C<wtimeout>: Optional. Milliseconds. Specify a value in milliseconds to control
how long to wait for write propagation to complete. If replication does not
complete in the given timeframe, the getLastError command will return with an
error status.

=for item1
C<Return document>: There are many fields in the returned document of which
C<ok>, C<lastOp> and  C<err> are the most obvious. Read the information on the
MongoDB site to find out more.


=head2 method get-prev-error

Defined as

  method get-prev-error ( --> Hash )

Returns all error documents since last reset.

=head2 method reset-error

Defined as

  method reset-error ( --> Hash )

Reset all errors.


