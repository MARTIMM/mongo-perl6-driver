#!/usr/bin/env perl6
#
use v6.c;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=begin Xhtml
<style>
  pre {
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
  td {
    vertical-align:     top;
  }
</style>
=end Xhtml

=TITLE class MongoDB::Client

=SUBTITLE Starting point to define connections to servers

  package MongoDB { class Client { ... } }

=head1 Synopsis

  my MongoDB::Client $client .= new(:uri<mongodb://>);
  if $client.nbr-servers {
    my MongoDB::Database $d1 = $client.database('my_db1');
    my MongoDB::Collection $c1 = $d1.collection('my_cll1');
    my MongoDB::Collection $c2 = $client.collection('my_db2.my_cll2');
  }

Class to help accessing servers.


=head1 Readonly attributes

=head2 read-concern

  has BSON::Document $.read-concern;

The read-concern is a structure to have some control over the read operations
to which server the operations are directed to. Default is an empty structure.
The structure will be explained elsewhere.


=head2 found-master

  has Bool $.found-master = False;

While the client is processing the given uri it will set this flag when a master
server is detected.


=head1 Methods

=head2 new

  submethod BUILD ( Str:D :$uri, BSON::Document :$read-concern )

=head3 uri

Uri defines the servers and control options. The string is like a normal uri
with mongodb as a protocol name. The difference however lies in the fact that
more that one server can be defined. The uri definition states that at least a
servername must be stated in the uri. Here in this package the absence of any
name defaults to C<localhost>. See also the L<MongoDB page|https://docs.mongodb.org/v3.0/reference/connection-string/> to look for
options and definition.

=begin table :caption('Uri examples')

  Example uri | Explanation
  =|=
  mongodb:// | most simple specification, localhost using port 27017
  mongodb://:65000 | localhost on port 65000
  mongodb://:56,:876  | two servers localhost on port 56 and 876
  mongodb://example.com | server example.com on port 27017
  mongodb://pete:mypasswd@ | server localhost:27017 on which pete must login using mypasswd
  mongodb://pete:mypasswd@/mydb | same as above but login on database mydb
  mongodb:///?replicaSet=myreplset | localhost:27017 must belong to a replica set named myreplset
  mongodb://u1:pw1@nsa.us:666,my.datacenter.gov/nsa/?replicaSet=foryoureyesonly | User u1 with password pw1 logging in on database nsa on server nsa.us:666 and my.datacenter.gov:27017 which must both be member of a replica set named foryoureyesonly.

=end table

Note that the servers named in the uri must have something in common such as a
replica set. Servers can be refused when there is some problem between them.
In such situations another Client should be created for the other server. See
table below.

Next a table where some processing results are shown for uri. In the table there
are short names use like n#(=digit): for normal server, r#: a replica server,
R# for replica names, r1R1 server is server for replicaset R1, i# are replicaset
servers which must be initialized before they become real servers, a# are arbiters
and s# mongos servers. An uninitialized replicaserver (i) is neither master nor
secondary. Port numbers are irrelevant here. When two servers in a replica set
R1 are used, the table shows 'r1R1, r2R1, R1' and the uri could be something like
'mongodb://r1,r2/?replicaSet=R1'.

=begin table

  Servers in uri | Result of processing in client
  =|=
  n1 | The server n1 will be found and accepted
  n1,n2 | Only one of two servers can be accepted because both might be master. Which server is accepted depends on who is fastest.
  n1,R1 | The server n1 will not be accepted because its not in a replicaset.
  n1,r1R1 | Only server n1 is accepted because no replicaset is mentioned in uri.
  n1,r1R1,R1 | Only server r1 is accepted.
  i1R1 | Server i1 accepted.
  i1R1,R1 | Server i1 is not accepted because its not a real replica server yet.
  r1R1,r2R1,R1 | Servers r1 and r2 are both accepted. There is a master and the other should be a secondary. In this case it should be possible to leave out one of the two servers because the server monitoring process would find the other servers in the replicaset.

=end table


=head3 read-concern

Read concern will overwrite the default concern.


=head2 nbr-servers

  method nbr-servers ( --> Int )

Return number of servers found processing the uri in new(). See also next method.


=head2 nbr-left-actions

  method nbr-left-actions ( --> Int )

Return number of still to be processed items from the uri. When this is 0 all
processing is done and nbr-servers() can be used to get the total of servers
found.


=head2 database

  method database (
    Str:D $name,
    BSON::Document :$read-concern
    --> MongoDB::Database
  )

Example

  my MongoDB::Database $db = $client.database('mydb');

Create a Database object. in mongodb a database and its collectionsare only
created when data is written in a collection.

The read-concern when defined will overide the one of the Client. If not
defined, the structure of the client is taken.


=head2 collection

  method collection (
    Str:D $full-collection-name,
    BSON::Document :$read-concern
    --> MongoDB::Collection
  )

A shortcut to define a database and collection at once. The names for the
database and collection are given in the string full-collection-name. This is a
string of two names separated by a dot '.'.

When the read-concern is defined it overides the one from Client. If not
defined, the structure of the client is taken.


=head2 select-server

  method select-server ( BSON::Document :$read-concern --> MongoDB::Server )

Select a server for operations. It returns a Server object. In single server
setups it is always the server you want to have. When however selecting a server
from a replicaset the server is selected according to several rules such as
read-concern, operation type (read or write) and round trip time to the server.
When read-concern is not defined, the data is taken from this Clients
read-concern.


=head2 shutdown-server

   method shutdown ( Bool :$force = False,  MongoDB::Server :$server )

Shutdown a mongod server. Before using this read the text from select-server()
above because you might end up shutting down the wrong server. It is much better
to use the commandline to shutdown a server when in a replicaset or sharded
configuration.

  > mongod --shutdown --dbpath <path to database>


=end pod
