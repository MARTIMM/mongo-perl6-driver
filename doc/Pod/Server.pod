#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=begin Xhtml
<style>
  pre {
/**/
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
</style>
=end Xhtml

=TITLE class MongoDB::Server

=SUBTITLE Mongod server object and info

Defined as

  package MongoDB { class Server { ... } }

The class is provides methods to provvide info about a mongod or mongos server.
The class is loaded and controlled by the MongoDB::Client module. Users should
not use this class but ask for a server using methods from Client. And even that
users should not do. All I/O is controlled internally.

=begin code

use v6;
use MongoDB::Client;
use MongoDB::Server;

# Get a server object
#
my MongoDB::Client $client .= instance;
my MongoDB::Server $server = $client.select-server;

=end code



=head1 ATTRIBUTES

=head2 server-name

Defined as

  has Str $.server-name;

Server name of this object

=head2 server-port

Defined as

  has Int $.server-port;

Server port of this object

=head2 max-sockets

Defined as

  has Int $.max-sockets is rw where $_ >= 3;

Maximum number of open sockets per server object
Can be changed by user of Server object. New values must >= 3.

=head2 status

Defined as

  has Bool $.status = False;

Status of server. True means that server is active and accepts connections.

=head2 is-master

  has Bool $.is-master = False;

Server is a master server.


=head1 METHODS

=head2 method new

Defined as:

  submethod BUILD (
    MongoDB::ClientIF :$client!,
    Str:D :$host!,
    Int:D :$port! where (0 <= $_ <= 65535),
    MongoDB::DatabaseIF:D :$db-admin!,
    Int :$max-sockets where $_ >= 3 = 3
  )

Creates a new C<Server> object. When all is ok the server status will
be True. Otherwise it will be False if a socket could not be opened. You see
that this must be created by a Client object to provide its address to the new()
method.

Example:

  my MongoDB::Server $s .= new(:host<non-existent-host.gov>);
  if !?$s.status {
    note 'Oh oh not good, try something else';

    # Try default or die
    $s .= new;
    die $s.status unless ?$s.status;
  }

=head2 method get-socket

Defined as

  method get-socket ( --> MongoDB::Socket )

Get a MongoDB::Socket object. By default there can be only 3 open socket per
server object.

=head2 method check-is-master

Defined as

  method check-is-master ( --> Bool )

Check if server is a master server. This method will also set the is-master
attribute.

=head2 method shutdown

Defined as

   method shutdown ( Bool :$force = False )

Shutdown mongod server.

=pod





=finish
=head2 method send

Defined as

  method send ( Buf:D $b --> Nil )

Send encoded data to the mongo server. DO NOT ATTEMPT TO USE IT YOURSELF. Let
instead the several modules do the sending because they know what to send.
Besides this, it is subject to change when connection pooling comes into play.

=head2 method receive

Defined as

  method receive ( Int $nbr-bytes --> Buf )

Receive the number of bytes from the server. Again: DO NOT ATTEMPT TO USE IT
YOURSELF. Let instead the several modules do the receiving because they know
what to expect.Besides this, it is subject to change when connection pooling
comes into play.

=end pod
