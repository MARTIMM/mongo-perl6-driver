#!/usr/bin/env perl6
#
use v6.c;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------
#
=begin pod

=TITLE MongoDB Package

=SUBTITLE Package using mongod server for storage and retrieval of data


=head1 Description

This package holds a set of modules which will help you accessing MongoDB
server or servers. The core operations are the methods run-command() from
MongoDB::Database and find() from MongoDB::Collection.


=head1 Modules

=head2 MongoDB/Authenticate.pm6

Definition of class MongoDB::Authenticate which provides authentication of
users defined with methods from MongoDB::Users.


=head2 MongoDB/Client.pm6

This file defines class C<MongoDB::Client> and is used to connect to
mongod servers. A database and collection can also be defined using the Client.


=head2 MongoDB/Collection.pm6

Defines class MongoDB::Collection. This is a module to find data in a collection.


=head2 MongoDB/Cursor.pm6

Defines class MongoDB::Cursor. The module is used to iterate through found data
searched for by find() from the C<MongoDB::Collection> module.


=head2 MongoDB/DataBase.pm6

Definition of class MongoDB::DataBase which handles specific database tasks.
A collection can be defined using Database.


=head2 MongoDB/Header.pm6

Helps MongoDB::Wire to encode and decode data for transport to and from server.


=head2 MongoDB/Server.pm6

Class to represent a mongo server. This class can return Socket objects.


=head2 MongoDB/Socket.pm6

Class to represent a connection to a server.


=head2 MongoDB/Uri.pm6

Class used by Client to parse the uri string.


=head2 MongoDB/Users.pm6

Defines class MongoDB::Users to administer user accounts.


=head2 MongoDB/Wire.pm6

Defines class MongoDB::Wire. Module is used to send and receive data using the
modules Header, Client, Server and Socket.


=head2 MongoDB

Module to hold basic information reachable from other modules. Further it
defines a role and an Exception class. See for more below.



=head1 class MongoDB

Defined as

  package MongoDB:ver<0.0.1> { ... }

Used as

  use MongoDB;

or

  use MongoDB:ver<0.0.1>

Base module to hold basic information. Specify proper version if C<:ver> is
used.


=head1 Types

=head2 Severity

Defined as:

  enum Severity <Trace Debug Info Warn Error Fatal>;

Used as:

  use MongoDB;
  my $sv = MongoDB::Severity::Warn;

An enumerated type holding names of severity levels. Usage can be like below.
See L<stackoverflow|http://stackoverflow.com/questions/2031163/when-to-use-log-level-warn-vs-error>
for more information.

=for item1
Trace - Only when I would be "tracing" the code and trying to find one part of a
function specifically

=for item1
Debug - Information that is diagnostically helpful to people more than just
developers (IT, sysadmins, etc)

=for item1
Info - Generally useful information to log (service start/stop, configuration
assumptions, etc). Info I want to always have available but usually dont care
about under normal circumstances. This is my out-of-the-box config level

=for item1
Warn - Anything that can potentially cause application oddities, but for which I
am automatically recoverring (such as switching from a primary to backup server,
retrying an operation, missing secondary data, etc)

=for item1
Error - Any error which is fatal to the operation but not the service or
application (cant open a required file, missing data, etc). These errors will
force user (administrator, or direct user) intervention. These are usually
reserved (in my apps) for incorrect connection strings, missing services, etc.

=for item1
Fatal - Any error that is forcing a shutdown of the service or application to
prevent data loss (or further data loss). I reserve these only for the most
heinous errors and situations where there is guaranteed to have been data
corruption or loss.


=head1 role Logging

Defined as:

  role Logging { ... }

This role can be used by any Exception provided that it also delivers some
attributes and methods to work with.
This role needs the attributes C<date-time> and C<severity> which hold the date and
time of object creation and severity saying something about how bad it is (all
relative of course ;-). Furthermore for each severity level there must be a
method. These methods must return a string with info about the exception. Sugested
is that the methods C<trace>, C<debug> and C<info> return info as a oneliner.

E.g.

  method debug ( --> Str ) {
    return "some debug text from fields within...";
  }

The levels are shown above with the definition of C<Severity>. It is not
nessesary to add date,time and severity because that will be handled by the
C<log> method described below.


=head2 Methods

=head3 mlog

Defined as:

  method mlog (  )

Log the error in the logfile using the message facilities in the exception. A
file will be opened if it is not opened before. Logging occurs on the following
conditions:

=for item1
There is no logging when logging is turned off. See also
L<set-exception-processing|#set-exception-processing>.

=for item1
The severity in the exception is equal to or higher then the severity processing
level. This is by default set to C<Info>. So a C<Trace> exception is not logged
and a C<Warn> is. See also L<set-exception-process-level|#set-exception-process-level>.

Examples of use are shown below when defining the C<MongoDB::Message> Exception.

Furthermore the severity is also tested against the exception trow level and and the
exception is thrown when level gets to high (above threshold set with
L<set-exception-throw-level|#set-exception-throw-level>.
Checking occurs on the following conditions:

=for item1
There is no checking when checking severity is turned off. See also
L<set-exception-processing|#set-exception-processing>.

=for item1
The severity in the exception is equal to or higher then the severity throw
level. This is by default set to C<Fatal>. So a C<Trace> exception is not thrown
but a C<Fatal> is. See also L<set-exception-throw-level|#set-exception-throw-level>.


=head1 Exported subs

=head2 set-exception-throw-level

Defined as:

  sub set-exception-throw-level (
    Severity:D $s where Error <= $s <= Fatal
  ) is export

use as:

  set-exception-throw-level(MongoDB::Severity::Error);

Set the exception throwing level. Throwing an exception
can only be done on Error or Fatal.


=head2 set-exception-process-level

Defined as:

  sub set-exception-process-level (
    Severity:D $s where Trace <= $s <= Warn
  ) is export {

use as:

  set-exception-process-level(MongoDB::Severity::Trace);

Set the exception logging level done in L<log|#mlog>. It is not possible to
raise this level higher than MongoDB::Severity::Warn.


=head2 set-exception-processing

Defined as:

  sub set-exception-processing (
    Bool :$logging = True,
    Bool :$checking = True
  ) is export

Use as

  # Turn all processing off.
  set-exception-processing( :!logging, :!checking);

Turn logging and/or checking on or off. Turning checking of severity levels
completely off is not advisable. When a high severity like C<Fatal> is not
thrown and acted upon, the data may be compromised. Better is to raise the level
to some point. The default is already at its highest


=head2 set-logfile

Defined as:

  multi sub set-logfile ( Str:D $filename ) is export
  multi sub set-logfile ( IO::Handle:D $file-handle! ) is export

Use as:

  set-logfile('My-file.log');

or

  set-logfile($*err);

Set the name of a logfile. Default set value is C<MongoDB.log>. When the first
log is done, the file is automatically opened. After that the filename change
will not have any effect. Call open-logfile explicitly to switch to the new
logfile.

If the argument is a file handle, the previous log file will be closed if any.
This handle will not be closed when it is C<$*err>, C<$*in> or C<$*out>.


=head2 open-logfile

Defined as:

  sub open-logfile ( ) is export

Use as:

  open-logfile();

Open the logfile. Any previously opened logfile is closed.


=head2 Absolute methods to be defined by child classes

Defined as

  method trace ( --> Str ) { ... }
  method debug ( --> Str ) { ... }
  method info ( --> Str ) { ... }
  method warn ( --> Str ) { ... }
  method error ( --> Str ) { ... }
  method fatal ( --> Str ) { ... }

  method message ( --> Str ) { ... }

The first six methods are called for each specific sverity value. The last one
is shown when exception is thrown and not caught.


=head1 class MongoDB::Message

Defined as

  package MongoDB { class Message is Exception does MongoDB::Logging { ... } }


=head2 Readonly attributes

=head3 message

This field will always be defined. It holds the 'why something failed'.


=head3 code

This code doesn't have to be defined. When the error is returned from the
server there is also a code.


=head3 oper-data

This is the representation of the used data structure sent to the server if any.
Mostly this is a serialized string using perl() on the object.


=head3 collection-ns

Database- and Collection name involved. Its a string where names are separated
by a dot ('.'), the first name being the database name. It is also known as
full collection name.


=head3 method

Method or routine name where the call to *-message() (see below) took place.


=head3 line

Line number where the call to *-message() (see below) took place.


=head3 file

File wherein that happened


=head2 Methods

=head3 log

Defined as

  method log (
    Str:D :$message.
    $error-code where $_ ~~ any(Int|Str) = '',
    Str :$oper-data,
    Str :$collection-ns,
    MongoDB::Severity :$severity = MongoDB::Severity::Warn
  )

Usage as

  my MongoDB::Message $logger .= new;
  $logger.log(
    :Message('Oops'),
    :error-code('oops-code'),
    :oper-data({ nooops => True}.perl),
  );

When the severity is too high the exception will be thrown. A part of the data
in this object is often set with data originating from the server after a request.

Logging and check of severity will take place automatically if the severity of
the exception are above the specific treshold levels.


=head1 Dependencies

Module MongoDB depends on Module C<BSON> and C<Digest::MD5>.


=head1 See also

The documentation at the L<MongoDB site|http://www.mongodb.org/>


=head1 Authors

  Paweł Pabian - Creator and maintainer of the modules until january 2015
  Marcel Timmerman - Maintainer since january 2015 (MARTIMM on github)

=head1 License and copyright

Released under L<Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>.

=end pod

=finish

http://unicode-table.com/en/026B/
E<51627>
E<0xC9AB>

#-------------------------------------------------------------------------------
