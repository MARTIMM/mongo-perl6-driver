#!/usr/bin/env perl6
#
use v6;

# Running the pod file will create a pdf using wkhtmltopdf
#
my Str $pod = "$*PROGRAM";
my Str $pdf = $pod;
$pdf ~~ s/\. <-[.]>+ $/.pdf/;
shell( "perl6 --doc=HTML '$pod' | wkhtmltopdf - '$pdf'");

#-------------------------------------------------------------------------------

=begin pod

=begin Xhtml
<style>
  pre {
/**/
    border-width:       2px;
    border-style:       solid;
    border-color:       #060;
    padding:            10px 0 3px 10px;
    color:              #060;
    background-color:   #eaefea;
    font-family:        FreeMono;
  }
</style>
=end Xhtml

=TITLE class MongoDB::Users

=SUBTITLE Administration of accounts used for authentication.

Defined as

  package MongoDB { class Users { ... } }

Use as

  use MongoDB::Connection;
  use MongoDB::Users;

  # Initialize
  #
  my $connection = MongoDB::Connection.new;
  my $database = $connection.database('test');

  my MongoDB::Database $database = $connection.database('test1');
  my MongoDB::Users $users .= new(:$database);

  my Hash $doc = $users.create-user(
    'John', 'simple',
    :custom-data((license => 'to_kill'),),
    :roles(['readWrite'])
  );

  $users.set-pw-security(
    :min-un-length(5),
    :min-pw-length(8),
    :pw_attribs($MongoDB::Users::PW-OTHER-CHARS)
  );

  my Hash $doc = $users.create-user(
    :'Long-John', 'N0t-s0-S!mPl3',
    :custom-data((license => 'to_kill'),),
    :roles([${role => 'readWrite', db => 'test3'},])
  );

  $doc = $users.update-user(
    'John',
    :password('mt+++'),
    :custom-data({license => 'to_heal'}),
    :roles( [ {role => 'readWrite', db => 'test1'},
              {role => 'dbAdmin', db => 'test2'}
            ]
          )
  );


Some methods from the C<MongoDB::Users> class will throw
C<X::MongoDB> exceptions when things go wrong. E.g. creating a user
which already exists or create a user with faulty arguments, e.g. password
too short.

=head1 METHODS

=head2 method set-pw-security

Defined as

  method set-pw-security (
    Int :$min-un-length where $min-un-length >= 2,
    Int :$min-pw-length where $min-pw-length >= 2,
    Int :$pw-attribs = MongoDB::C-PW-LOWERCASE
  )

Method to specify some checks upon usernames and passwords. Default values for
the username minimal length is 2. For passwords idem depending on the password
attribute code. $pw-attribs specifies how passwords are to be checked. There are
4 codes recognized.

=item B<MongoDB::C-PW-LOWERCASE>: All is accepted but lowercase characters must
at least be used. When $min-pw-length is not set it will be set to 2.

=item B<MongoDB::C-PW-UPPERCASE>: All is accepted but lowercase and uppercase
characters must at least be used. When $min-pw-length is not set it will be set
to 2.

=item B<MongoDB::C-PW-NUMBERS>: All is accepted but lowercase, uppercase
characters and numbers must at least be used. When $min-pw-length is not set it
will be set to 3.

=item B<MongoDB::C-PW-OTHER-CHARS>: All is accepted but lowercase, uppercase
characters, numbers and special characters like @ ! $ etcetera, must at least be
used. When $min-pw-length is not set it will be set to 4.

If e.g. C<MongoDB::C-PW-OTHER-CHARS> and C<$min-pw-length> is set to 2 then when
using a password of less the 4 characters the call is bound to fail.

=head2 method create-user

Defined as

  method create-user (
    Str $user:D, Str:D $password,
    :$custom-data, Array :$roles, Int :$timeout
    --> BSON::Document
  )

Method to create a user. Roles can be specified in several ways. It is an array
with entries of strings or hashes. When it is a string it specifies the role
assigned to the user. When it is a hash, the hash must have two keys. One is
C<role> and the other is C<db>. In this case the role is assigned to the user
but only for a specific daabase.

Important note; When one hash is used it is important to itemize the hash
because otherwise the hash will be flattened into a list of pairs which is
probably not what you mean.

Some examples of the roles option;

  :roles(['readWrite'])

  :roles([{role => 'readWrite', db => 'test1'},
          {role => 'dbAdmin', db => 'test2'}
         ]
        )

  :roles([${role => 'dbAdmin', db => 'test2'}])

  :roles([{role => 'dbAdmin', db => 'test2'},])

Notice the $ in the 3rd and the comma in the last example.

=head2 method update-user

Defined as

  method update-user (
    Str $user, Str :$password,
    :$custom-data, Array :$roles, Int :$timeout
    --> BSON::Document
  )

Update user accont data


=end pod

